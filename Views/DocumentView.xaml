<UserControl
    x:Class="Dash.DocumentView"
    x:Name="Root"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="using:Dash"
    xmlns:views="using:Dash.Views"
    xmlns:xaml="using:Microsoft.Graphics.Canvas.UI.Xaml"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance local:DocumentViewModel}"
    d:DesignWidth="400"
    d:DesignHeight="400"
    AllowDrop="True"
    DragOver="This_DragOver"
    DragLeave="This_DragLeave"
    Drop="This_Drop"
    UseLayoutRounding="False"
    
    >
    <UserControl.Resources>
        <Storyboard x:Name="FadeOut" Completed="FadeOut_Completed" SpeedRatio="0.7">
            <FadeOutThemeAnimation TargetName="Root"></FadeOutThemeAnimation>
        </Storyboard>
        <Storyboard x:Name="FadeIn" SpeedRatio="0.7">
            <DoubleAnimation
                Storyboard.TargetName="Root"
                Storyboard.TargetProperty="Opacity"
                From="0.0" To="1.0" Duration="0:0:0.2"/>
        </Storyboard>
        <local:BoolToBrushConverter x:Key="BoolToBrushConverter"/>
        <SolidColorBrush x:Key="DocumentBackground" Color="{ThemeResource DocumentBackgroundColor}"></SolidColorBrush>
    </UserControl.Resources>

    <Grid x:Name="xMasterStack">
        <Grid.RowDefinitions>
            <RowDefinition  Height="Auto"/>
            <RowDefinition  Height="*"/>
        </Grid.RowDefinitions>

        <!--Key Value Flyout-->
        <Border x:Name="xKeyValueBorder" Grid.Row="0" Height="0" Width="0">
            <Border.Resources>
                <Storyboard x:Name="xQuickEntryIn">
                    <DoubleAnimation 
                        Storyboard.TargetName="xKeyValueBorder"
                        Storyboard.TargetProperty="MinHeight"
                        To="60"
                        Duration="0:0:0.2"
                        EnableDependentAnimation="True"/>
                </Storyboard>
                <Storyboard x:Name="xQuickEntryOut">
                    <DoubleAnimation 
                        Storyboard.TargetName="xKeyValueBorder"
                        Storyboard.TargetProperty="MinHeight"
                        To="0"
                        Duration="0:0:0.2"
                        EnableDependentAnimation="True"/>
                </Storyboard>
                <Storyboard x:Name="xKeyEditFailure">
                    <ColorAnimation 
                        Storyboard.TargetName="xKeyBox"
                        Storyboard.TargetProperty="(TextBox.Background).(SolidColorBrush.Color)"
                        To="Red"
                        AutoReverse="True"
                        Duration="0:0:0.2"
                        EnableDependentAnimation="True"/>
                </Storyboard>
                <Storyboard x:Name="xValueEditFailure">
                    <ColorAnimation 
                        Storyboard.TargetName="xValueBox"
                        Storyboard.TargetProperty="(TextBox.Background).(SolidColorBrush.Color)"
                        To="Red"
                        AutoReverse="True"
                        Duration="0:0:0.2"
                        EnableDependentAnimation="True"/>
                </Storyboard>
                <Storyboard x:Name="xValueErrorFailure">
                    <ColorAnimation 
                        Storyboard.TargetName="xValueBox"
                        Storyboard.TargetProperty="(TextBox.Background).(SolidColorBrush.Color)"
                        To="Navy"
                        AutoReverse="True"
                        Duration="0:0:0.2"
                        EnableDependentAnimation="True"/>
                </Storyboard>
                <Storyboard x:Name="xKeyEditSuccess">
                    <ColorAnimation 
                        Storyboard.TargetName="xKeyBox"
                        Storyboard.TargetProperty="(TextBox.Background).(SolidColorBrush.Color)"
                        To="ForestGreen"
                        AutoReverse="True"
                        Duration="0:0:0.2"
                        EnableDependentAnimation="True"/>
                </Storyboard>
                <Storyboard x:Name="xValueEditSuccess">
                        <ColorAnimation 
                        Storyboard.TargetName="xValueBox"
                        Storyboard.TargetProperty="(TextBox.Background).(SolidColorBrush.Color)"
                        To="ForestGreen"
                        AutoReverse="True"
                        Duration="0:0:0.2"
                        EnableDependentAnimation="True"/>
                </Storyboard>
            </Border.Resources>
            <Grid>
                <Grid Margin="0, 0, 0, 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="1"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <local:ActionTextBox
                        x:Name="xKeyBox"
                        Margin="7, 0, 3, 0"
                        Padding="7, 3, 0, 0"
                        MaxLength="30"
                        Grid.Column="0"
                        AcceptsReturn="False"
                        IsSpellCheckEnabled="False"
                        Height="25"/>
                    <local:ActionTextBox
                        x:Name="xValueBox"
                        Margin="3, 0, 7, 0"
                        Padding="7, 3, 0, 0"
                        Grid.Column="2"
                        AcceptsReturn="False"
                        IsSpellCheckEnabled="False"
                        PlaceholderText="Value..."
                        Height="25"/>
                </Grid>
            </Grid>

        </Border>

        <Border x:Name="xTargetBorder" x:FieldModifier="public" Grid.Row="1" >
            <Grid x:Name="LayoutRoot" BorderThickness="0" SizeChanged="LayoutRoot_OnSizeChanged" PointerMoved="LayoutRoot_OnPointerMoved">
                <Grid.Clip>
                    <RectangleGeometry x:Name="xContentClip" Rect="0 0 0 0"></RectangleGeometry>
                </Grid.Clip>
                <Grid.Resources>
                    <Storyboard x:Name="xContentZoomAnimation">
                        <DoubleAnimation x:Name="xContentZoomX" Storyboard.TargetName="xContentTransform.Value" 
                                         Storyboard.TargetProperty="M11"
                                         From="0" To="0" Duration="0:0:.1" >
                        </DoubleAnimation>
                        <DoubleAnimation x:Name="xContentZoomY" Storyboard.TargetName="xContentTransform.Value" 
                                         Storyboard.TargetProperty="M22"
                                         From="0" To="0" Duration="0:0:.1">
                        </DoubleAnimation>
                    </Storyboard>
                </Grid.Resources>
                <!--Context flyout for right-click context menu; this opens automatically when the DocumentView grid is right clicked and is dismissed when anything else is clicked-->
                <Grid.ContextFlyout>
                    <MenuFlyout x:Name="xMenuFlyout" Opening="XMenuFlyout_OnOpening">

                        <!--There's a MenuFlyoutItem for each clickable item in the right click menu for DocumentViews; CollectionViews will add more items to this-->

                        <MenuFlyoutItem Text="Open" Icon="OpenFile" Click="MenuFlyoutItemOpen_OnClick" />
                        <MenuFlyoutItem Text="Delete" Icon="Delete" Click="MenuFlyoutItemDelete_Click" />
                        <MenuFlyoutItem Text="Hide" Icon="Preview" Click="MenuFlyoutItemHide_Click" />

                        <MenuFlyoutSeparator />

                        <MenuFlyoutItem Text="Duplicate" Icon="Copy" Click="MenuFlyoutItemCopy_Click" />
                        <MenuFlyoutItem Text="Alias" Icon="TwoPage" Click="MenuFlyoutItemAlias_Click" />

                        <MenuFlyoutSeparator />

                        <MenuFlyoutItem Text="Fields" Icon="ShowResults" Click="MenuFlyoutItemFields_Click" />
                        <MenuFlyoutItem Text="Context" Icon="SetLockScreen" Click="MenuFlyoutItemContext_Click" />

                        <MenuFlyoutSeparator />

                        <MenuFlyoutItem Text="Pin to Presentation" Icon="Pin" Click="MenuFlyoutItemPin_Click" />
                        <MenuFlyoutItem x:Name="xAnnotationVisibility" Text="Show Annotation On Scroll" Icon="Priority" Click="ToggleAnnotationVisibility_OnClick" />
                        <!--<MenuFlyoutItem Text="Apply Template" Icon="MoveToFolder" Click="MenuFlyoutItemApplyTemplate_Click" />-->
                        <MenuFlyoutItem Text="Toggle As Adornment" Icon="Trim" Click="MenuFlyoutItemToggleAsAdornment_Click" />

                        <MenuFlyoutSeparator />

                        <MenuFlyoutItem Text="Screen Capture" Icon="WebCam" Click="MenuFlyoutItemScreenCap_Click" />
                        <MenuFlyoutItem Text="Launch App" Icon="Go" Click="MenuFlyoutLaunch_Click" />
                        <MenuFlyoutItem Text="Copy History to Clipboard" Icon="Paste" Click="MenuFlyoutItemCopyHistory_Click" />

                    </MenuFlyout>
                </Grid.ContextFlyout>

                <Canvas x:Name="xShadowHost" HorizontalAlignment="Stretch" Visibility="Visible" VerticalAlignment="Stretch" />
                <Rectangle x:Name="xDocumentBackground" x:FieldModifier="public" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="Transparent" />
                <ContentPresenter x:Name="xContentPresenter" x:FieldModifier="public" Content="{Binding Content}" >
                    <ContentPresenter.RenderTransform>
                        <TransformGroup x:Name="xContentTransform" >
                        </TransformGroup>
                       
                    </ContentPresenter.RenderTransform>
                    
                </ContentPresenter>

                <!-- 
                <ScrollViewer x:Name="xContentScrollViewer" ZoomMode="Enabled" VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Disabled" MinZoomFactor="1" LayoutUpdated="XContentScrollViewer_OnLayoutUpdated" ViewChanging="XContentScrollViewer_OnViewChanging" ViewChanged="XContentScrollViewer_OnViewChanged" Width="1000" Height="1000">
                    <ContentPresenter x:Name="xContentPresenter" x:FieldModifier="public" Content="{Binding Content}" >
                        <ContentPresenter.RenderTransform>
                            <CompositeTransform x:Name="ContentTransform"></CompositeTransform>
                        </ContentPresenter.RenderTransform>
                    </ContentPresenter>
                                                      
                </ScrollViewer>
                
                
                -->
               
                <Ellipse x:Name="xActivationMode" HorizontalAlignment="Right" VerticalAlignment="Top" Tapped="xActivationMode_Tapped" Visibility="Collapsed" Margin="0 -40 -40 0" Width="40" Height="40" Fill="Green" />
            </Grid>
        </Border>
        <!-- border to highlight search results-->
        <Border x:Name="xDocHighlight"  Grid.Row="1"  BorderBrush="{Binding SearchHighlightBrush}" BorderThickness="{Binding SearchHighlightState}" >
            <Border.Resources>
                <Storyboard x:Name="xToRed">
                    <ColorAnimation 
                    Storyboard.TargetName="xDocHighlight"
                    Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                    To="DarkRed"
                    Duration="0:0:0.2"
                    EnableDependentAnimation="True"/>
                </Storyboard>
                <Storyboard x:Name="xToYellow">
                    <ColorAnimation 
                    Storyboard.TargetName="xDocHighlight"
                    Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                    To="Yellow"
                    Duration="0:0:0.2"
                    EnableDependentAnimation="True"/>
                </Storyboard>
            </Border.Resources>
        </Border>
    </Grid>
</UserControl>