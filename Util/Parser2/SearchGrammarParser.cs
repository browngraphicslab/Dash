//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SearchGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class SearchGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		NEWLINE=10, WORD=11, STRING=12, WS=13;
	public const int
		RULE_value = 0, RULE_keylist = 1, RULE_valuesearch = 2, RULE_kvsearch = 3, 
		RULE_args = 4, RULE_function = 5, RULE_term = 6, RULE_negation = 7, RULE_or = 8, 
		RULE_and = 9, RULE_query = 10;
	public static readonly string[] ruleNames = {
		"value", "keylist", "valuesearch", "kvsearch", "args", "function", "term", 
		"negation", "or", "and", "query"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "'-'", "':'", "'('", "')'", "'!'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "NEWLINE", 
		"WORD", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SearchGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SearchGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SearchGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SearchGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(SearchGrammarParser.WORD, 0); }
		public ITerminalNode STRING() { return GetToken(SearchGrammarParser.STRING, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISearchGrammarVisitor<TResult> typedVisitor = visitor as ISearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 0, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			_la = TokenStream.LA(1);
			if ( !(_la==WORD || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeylistContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(SearchGrammarParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(SearchGrammarParser.WS, i);
		}
		public KeylistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keylist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.EnterKeylist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.ExitKeylist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISearchGrammarVisitor<TResult> typedVisitor = visitor as ISearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeylist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeylistContext keylist() {
		KeylistContext _localctx = new KeylistContext(Context, State);
		EnterRule(_localctx, 2, RULE_keylist);
		int _la;
		try {
			int _alt;
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; value();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 25; Match(T__0);
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 26; Match(WS);
					}
					}
					State = 31;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 48;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 32; value();
						State = 36;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 33; Match(WS);
							}
							}
							State = 38;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 39; Match(T__1);
						State = 43;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 40; Match(WS);
							}
							}
							State = 45;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						} 
					}
					State = 50;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				State = 51; value();
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 52; Match(WS);
					}
					}
					State = 57;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 58; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesearchContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ValuesearchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuesearch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.EnterValuesearch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.ExitValuesearch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISearchGrammarVisitor<TResult> typedVisitor = visitor as ISearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesearch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesearchContext valuesearch() {
		ValuesearchContext _localctx = new ValuesearchContext(Context, State);
		EnterRule(_localctx, 4, RULE_valuesearch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvsearchContext : ParserRuleContext {
		public KeylistContext keylist() {
			return GetRuleContext<KeylistContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public KvsearchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvsearch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.EnterKvsearch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.ExitKvsearch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISearchGrammarVisitor<TResult> typedVisitor = visitor as ISearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvsearch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvsearchContext kvsearch() {
		KvsearchContext _localctx = new KvsearchContext(Context, State);
		EnterRule(_localctx, 6, RULE_kvsearch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 64; Match(T__3);
				}
			}

			State = 67; keylist();
			State = 68; Match(T__4);
			State = 69; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(SearchGrammarParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(SearchGrammarParser.WS, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISearchGrammarVisitor<TResult> typedVisitor = visitor as ISearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 8, RULE_args);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 71; value();
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 72; Match(WS);
						}
						}
						State = 77;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 78; Match(T__1);
					State = 82;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 79; Match(WS);
							}
							} 
						}
						State = 84;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
					}
					}
					} 
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORD || _la==STRING) {
				{
				State = 90; value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(SearchGrammarParser.WORD, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(SearchGrammarParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(SearchGrammarParser.WS, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISearchGrammarVisitor<TResult> typedVisitor = visitor as ISearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 10, RULE_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(WORD);
			State = 94; Match(T__5);
			State = 98;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 95; Match(WS);
					}
					} 
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 101; args();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 102; Match(WS);
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public KvsearchContext kvsearch() {
			return GetRuleContext<KvsearchContext>(0);
		}
		public ValuesearchContext valuesearch() {
			return GetRuleContext<ValuesearchContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(SearchGrammarParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(SearchGrammarParser.WS, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISearchGrammarVisitor<TResult> typedVisitor = visitor as ISearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 12, RULE_term);
		int _la;
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; kvsearch();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; valuesearch();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; function();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113; Match(T__5);
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 114; Match(WS);
					}
					}
					State = 119;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 120; query();
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 121; Match(WS);
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 127; Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public NegationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISearchGrammarVisitor<TResult> typedVisitor = visitor as ISearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationContext negation() {
		NegationContext _localctx = new NegationContext(Context, State);
		EnterRule(_localctx, 14, RULE_negation);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__3:
			case T__5:
			case WORD:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; term();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; Match(T__7);
				State = 133; term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrContext : ParserRuleContext {
		public NegationContext[] negation() {
			return GetRuleContexts<NegationContext>();
		}
		public NegationContext negation(int i) {
			return GetRuleContext<NegationContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(SearchGrammarParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(SearchGrammarParser.WS, i);
		}
		public OrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISearchGrammarVisitor<TResult> typedVisitor = visitor as ISearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrContext or() {
		OrContext _localctx = new OrContext(Context, State);
		EnterRule(_localctx, 16, RULE_or);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 136; negation();
					State = 140;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 137; Match(WS);
						}
						}
						State = 142;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 143; Match(T__8);
					State = 147;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 144; Match(WS);
						}
						}
						State = 149;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					} 
				}
				State = 154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 155; negation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndContext : ParserRuleContext {
		public OrContext[] or() {
			return GetRuleContexts<OrContext>();
		}
		public OrContext or(int i) {
			return GetRuleContext<OrContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(SearchGrammarParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(SearchGrammarParser.WS, i);
		}
		public AndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISearchGrammarVisitor<TResult> typedVisitor = visitor as ISearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndContext and() {
		AndContext _localctx = new AndContext(Context, State);
		EnterRule(_localctx, 18, RULE_and);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 157; or();
					State = 158; Match(WS);
					}
					} 
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 165; or();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		public AndContext and() {
			return GetRuleContext<AndContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISearchGrammarListener typedListener = listener as ISearchGrammarListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISearchGrammarVisitor<TResult> typedVisitor = visitor as ISearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 20, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; and();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', '\xAC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x1E', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '!', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '%', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '(', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', ',', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'/', '\v', '\x3', '\a', '\x3', '\x31', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x34', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x38', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', ';', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '?', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x5', '\x5', '\x44', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'L', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'O', '\v', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'S', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', 'V', '\v', '\x6', '\a', '\x6', 'X', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '[', '\v', '\x6', '\x3', '\x6', '\x5', '\x6', '^', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x63', '\n', '\a', 
		'\f', '\a', '\xE', '\a', '\x66', '\v', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', 'j', '\n', '\a', '\f', '\a', '\xE', '\a', 'm', '\v', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', 'v', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'y', '\v', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '}', '\n', '\b', 
		'\f', '\b', '\xE', '\b', '\x80', '\v', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\x84', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x89', '\n', '\t', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'\x8D', '\n', '\n', '\f', '\n', '\xE', '\n', '\x90', '\v', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', '\x94', '\n', '\n', '\f', '\n', '\xE', 
		'\n', '\x97', '\v', '\n', '\a', '\n', '\x99', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\x9C', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\xA3', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\xA6', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x2', '\x2', '\r', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x2', '\x3', '\x3', 
		'\x2', '\r', '\xE', '\x2', '\xB7', '\x2', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '>', '\x3', '\x2', '\x2', '\x2', '\x6', '@', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x43', '\x3', '\x2', '\x2', '\x2', '\n', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\f', '_', '\x3', '\x2', '\x2', '\x2', '\xE', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x14', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', 
		'\t', '\x2', '\x2', '\x2', '\x19', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '?', '\x5', '\x2', '\x2', '\x2', '\x1B', '\x1F', '\a', '\x3', 
		'\x2', '\x2', '\x1C', '\x1E', '\a', '\xF', '\x2', '\x2', '\x1D', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '!', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x32', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\"', '&', '\x5', '\x2', '\x2', '\x2', '#', '%', '\a', '\xF', 
		'\x2', '\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', '%', '(', '\x3', '\x2', 
		'\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\'', ')', '\x3', '\x2', '\x2', '\x2', '(', '&', 
		'\x3', '\x2', '\x2', '\x2', ')', '-', '\a', '\x4', '\x2', '\x2', '*', 
		',', '\a', '\xF', '\x2', '\x2', '+', '*', '\x3', '\x2', '\x2', '\x2', 
		',', '/', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '\x30', '\"', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x34', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x35', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x39', '\x5', '\x2', '\x2', '\x2', '\x36', '\x38', 
		'\a', '\xF', '\x2', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x38', ';', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '<', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', '<', '=', 
		'\a', '\x5', '\x2', '\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', '>', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '>', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x5', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x5', '\x2', 
		'\x2', '\x2', '\x41', '\a', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', 
		'\a', '\x6', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\x5', '\x4', '\x3', '\x2', '\x46', 'G', 
		'\a', '\a', '\x2', '\x2', 'G', 'H', '\x5', '\x2', '\x2', '\x2', 'H', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'M', '\x5', '\x2', '\x2', '\x2', 'J', 
		'L', '\a', '\xF', '\x2', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x3', '\x2', '\x2', '\x2', 
		'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'T', '\a', '\x4', '\x2', '\x2', 
		'Q', 'S', '\a', '\xF', '\x2', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 
		'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'I', '\x3', '\x2', '\x2', '\x2', 
		'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', 
		'[', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\x5', '\x2', '\x2', 
		'\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', 
		'\x2', '\x2', '^', '\v', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\r', 
		'\x2', '\x2', '`', '\x64', '\a', '\b', '\x2', '\x2', '\x61', '\x63', '\a', 
		'\xF', '\x2', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', 'g', 
		'k', '\x5', '\n', '\x6', '\x2', 'h', 'j', '\a', '\xF', '\x2', '\x2', 'i', 
		'h', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', '\x2', '\x2', 
		'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 
		'l', 'n', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\a', '\t', '\x2', '\x2', 'o', '\r', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x84', '\x5', '\b', '\x5', '\x2', 'q', '\x84', '\x5', '\x6', '\x4', 
		'\x2', 'r', '\x84', '\x5', '\f', '\a', '\x2', 's', 'w', '\a', '\b', '\x2', 
		'\x2', 't', 'v', '\a', '\xF', '\x2', '\x2', 'u', 't', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'y', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'z', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 'z', '~', '\x5', '\x16', 
		'\f', '\x2', '{', '}', '\a', '\xF', '\x2', '\x2', '|', '{', '\x3', '\x2', 
		'\x2', '\x2', '}', '\x80', '\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\a', '\t', '\x2', '\x2', '\x82', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x83', 'p', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x83', 'r', '\x3', '\x2', '\x2', '\x2', 
		'\x83', 's', '\x3', '\x2', '\x2', '\x2', '\x84', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x89', '\x5', '\xE', '\b', '\x2', '\x86', '\x87', 
		'\a', '\n', '\x2', '\x2', '\x87', '\x89', '\x5', '\xE', '\b', '\x2', '\x88', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x11', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8E', '\x5', 
		'\x10', '\t', '\x2', '\x8B', '\x8D', '\a', '\xF', '\x2', '\x2', '\x8C', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x91', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x91', '\x95', '\a', '\v', '\x2', 
		'\x2', '\x92', '\x94', '\a', '\xF', '\x2', '\x2', '\x93', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x97', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x99', '\x3', '\x2', '\x2', '\x2', '\x97', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9E', '\x5', '\x10', '\t', '\x2', '\x9E', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA0', '\x5', '\x12', '\n', '\x2', '\xA0', '\xA1', '\a', 
		'\xF', '\x2', '\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x5', '\x12', '\n', 
		'\x2', '\xA8', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x5', 
		'\x14', '\v', '\x2', '\xAA', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x1F', '&', '-', '\x32', '\x39', '>', '\x43', 'M', 'T', 'Y', ']', '\x64', 
		'k', 'w', '~', '\x83', '\x88', '\x8E', '\x95', '\x9A', '\xA4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
