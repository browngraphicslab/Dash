//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DashSearchGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class DashSearchGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, NEWLINE=7, ALPHANUM=8, 
		STRING=9, WHITESPACE=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "LOWERCASE", "UPPERCASE", 
		"ESCAPED_QUOTE", "NEWLINE", "ALPHANUM", "STRING", "WHITESPACE"
	};


	public DashSearchGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DashSearchGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "'('", "')'", "'|'", "':'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "NEWLINE", "ALPHANUM", "STRING", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DashSearchGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DashSearchGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\f', 'M', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x6', 
		'\v', '\x32', '\n', '\v', '\r', '\v', '\xE', '\v', '\x33', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x6', '\f', ';', 
		'\n', '\f', '\r', '\f', '\xE', '\f', '<', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\x42', '\n', '\r', '\f', '\r', '\xE', '\r', '\x45', 
		'\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x6', '\xE', 'J', 
		'\n', '\xE', '\r', '\xE', '\xE', '\xE', 'K', '\x3', '\x43', '\x2', '\xF', 
		'\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', 
		'\b', '\xF', '\x2', '\x11', '\x2', '\x13', '\x2', '\x15', '\t', '\x17', 
		'\n', '\x19', '\v', '\x1B', '\f', '\x3', '\x2', '\a', '\x3', '\x2', '\x63', 
		'|', '\x3', '\x2', '\x43', '\\', '\x4', '\x2', '\f', '\f', '\xF', '\xF', 
		'\x4', '\x2', '\x32', ';', '\x61', '\x61', '\x4', '\x2', '\v', '\v', '\"', 
		'\"', '\x2', 'P', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x5', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\a', '!', '\x3', '\x2', '\x2', '\x2', '\t', '#', '\x3', 
		'\x2', '\x2', '\x2', '\v', '%', '\x3', '\x2', '\x2', '\x2', '\r', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\xF', ')', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x13', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x31', '\x3', '\x2', '\x2', '\x2', '\x17', ':', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '>', '\x3', '\x2', '\x2', '\x2', '\x1B', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '.', '\x2', '\x2', '\x1E', 
		'\x4', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '*', '\x2', '\x2', 
		' ', '\x6', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '+', '\x2', '\x2', 
		'\"', '\b', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '~', '\x2', '\x2', 
		'$', '\n', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '<', '\x2', '\x2', 
		'&', '\f', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '#', '\x2', '\x2', 
		'(', '\xE', '\x3', '\x2', '\x2', '\x2', ')', '*', '\t', '\x2', '\x2', 
		'\x2', '*', '\x10', '\x3', '\x2', '\x2', '\x2', '+', ',', '\t', '\x3', 
		'\x2', '\x2', ',', '\x12', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', 
		'^', '\x2', '\x2', '.', '/', '\a', '$', '\x2', '\x2', '/', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x32', '\t', '\x4', '\x2', '\x2', '\x31', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\b', '\v', '\x2', '\x2', '\x36', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x37', ';', '\x5', '\xF', '\b', '\x2', '\x38', ';', '\x5', '\x11', 
		'\t', '\x2', '\x39', ';', '\t', '\x5', '\x2', '\x2', ':', '\x37', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', '\x39', 
		'\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', 
		':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', 
		'=', '\x18', '\x3', '\x2', '\x2', '\x2', '>', '\x43', '\a', '$', '\x2', 
		'\x2', '?', '\x42', '\x5', '\x13', '\n', '\x2', '@', '\x42', '\n', '\x4', 
		'\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x46', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\a', '$', '\x2', '\x2', 'G', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'J', '\t', '\x6', '\x2', '\x2', 'I', 
		'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1C', '\x3', '\x2', '\x2', '\x2', '\t', '\x2', '\x33', ':', '<', 
		'\x41', '\x43', 'K', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
