//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DashSearchGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class DashSearchGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, NEWLINE=8, ALPHANUM=9, 
		WHITESPACE=10;
	public const int
		RULE_arguments = 0, RULE_input = 1, RULE_function_expr = 2, RULE_and_token = 3, 
		RULE_or_token = 4, RULE_operator = 5, RULE_phrase = 6, RULE_chain = 7, 
		RULE_logical_expr = 8, RULE_kv_search = 9;
	public static readonly string[] ruleNames = {
		"arguments", "input", "function_expr", "and_token", "or_token", "operator", 
		"phrase", "chain", "logical_expr", "kv_search"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'('", "')'", "'|'", "'\"'", "'!'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "NEWLINE", "ALPHANUM", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DashSearchGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DashSearchGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DashSearchGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DashSearchGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ArgumentsContext : ParserRuleContext {
		public ITerminalNode[] ALPHANUM() { return GetTokens(DashSearchGrammarParser.ALPHANUM); }
		public ITerminalNode ALPHANUM(int i) {
			return GetToken(DashSearchGrammarParser.ALPHANUM, i);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(DashSearchGrammarParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(DashSearchGrammarParser.WHITESPACE, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 0, RULE_arguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 20; Match(ALPHANUM);
					State = 21; Match(T__0);
					State = 23;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHITESPACE) {
						{
						State = 22; Match(WHITESPACE);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 27;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 29; Match(ALPHANUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 2, RULE_input);
		try {
			State = 33;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ALPHANUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 32; arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_exprContext : ParserRuleContext {
		public ITerminalNode ALPHANUM() { return GetToken(DashSearchGrammarParser.ALPHANUM, 0); }
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public Function_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_exprContext function_expr() {
		Function_exprContext _localctx = new Function_exprContext(Context, State);
		EnterRule(_localctx, 4, RULE_function_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(ALPHANUM);
			State = 36; Match(T__1);
			State = 37; input();
			State = 38; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_tokenContext : ParserRuleContext {
		public ITerminalNode WHITESPACE() { return GetToken(DashSearchGrammarParser.WHITESPACE, 0); }
		public And_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterAnd_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitAnd_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_tokenContext and_token() {
		And_tokenContext _localctx = new And_tokenContext(Context, State);
		EnterRule(_localctx, 6, RULE_and_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(WHITESPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_tokenContext : ParserRuleContext {
		public ITerminalNode[] WHITESPACE() { return GetTokens(DashSearchGrammarParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(DashSearchGrammarParser.WHITESPACE, i);
		}
		public Or_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterOr_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitOr_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_tokenContext or_token() {
		Or_tokenContext _localctx = new Or_tokenContext(Context, State);
		EnterRule(_localctx, 8, RULE_or_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 42; Match(WHITESPACE);
				}
			}

			State = 45; Match(T__3);
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 46; Match(WHITESPACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public And_tokenContext and_token() {
			return GetRuleContext<And_tokenContext>(0);
		}
		public Or_tokenContext or_token() {
			return GetRuleContext<Or_tokenContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_operator);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49; and_token();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50; or_token();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PhraseContext : ParserRuleContext {
		public ITerminalNode ALPHANUM() { return GetToken(DashSearchGrammarParser.ALPHANUM, 0); }
		public PhraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phrase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterPhrase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitPhrase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhraseContext phrase() {
		PhraseContext _localctx = new PhraseContext(Context, State);
		EnterRule(_localctx, 12, RULE_phrase);
		try {
			int _alt;
			State = 62;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALPHANUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; Match(ALPHANUM);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; Match(T__4);
				State = 58;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 55;
						MatchWildcard();
						}
						} 
					}
					State = 60;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				State = 61; Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainContext : ParserRuleContext {
		public PhraseContext[] phrase() {
			return GetRuleContexts<PhraseContext>();
		}
		public PhraseContext phrase(int i) {
			return GetRuleContext<PhraseContext>(i);
		}
		public OperatorContext[] @operator() {
			return GetRuleContexts<OperatorContext>();
		}
		public OperatorContext @operator(int i) {
			return GetRuleContext<OperatorContext>(i);
		}
		public ChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterChain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitChain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainContext chain() {
		ChainContext _localctx = new ChainContext(Context, State);
		EnterRule(_localctx, 14, RULE_chain);
		int _la;
		try {
			int _alt;
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 64; Match(T__5);
					}
				}

				State = 67; phrase();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 68; phrase();
						State = 69; @operator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 73;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 75; phrase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_exprContext : ParserRuleContext {
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public Logical_exprContext[] logical_expr() {
			return GetRuleContexts<Logical_exprContext>();
		}
		public Logical_exprContext logical_expr(int i) {
			return GetRuleContext<Logical_exprContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public Logical_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterLogical_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitLogical_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_exprContext logical_expr() {
		return logical_expr(0);
	}

	private Logical_exprContext logical_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_exprContext _localctx = new Logical_exprContext(Context, _parentState);
		Logical_exprContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_logical_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__5:
			case ALPHANUM:
				{
				State = 80; chain();
				}
				break;
			case T__1:
				{
				State = 81; Match(T__1);
				State = 82; logical_expr(0);
				State = 83; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 93;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_exprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logical_expr);
					State = 87;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 88; @operator();
					State = 89; logical_expr(3);
					}
					} 
				}
				State = 95;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Kv_searchContext : ParserRuleContext {
		public PhraseContext[] phrase() {
			return GetRuleContexts<PhraseContext>();
		}
		public PhraseContext phrase(int i) {
			return GetRuleContext<PhraseContext>(i);
		}
		public Kv_searchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kv_search; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterKv_search(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitKv_search(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKv_search(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kv_searchContext kv_search() {
		Kv_searchContext _localctx = new Kv_searchContext(Context, State);
		EnterRule(_localctx, 18, RULE_kv_search);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; phrase();
			State = 97; Match(T__6);
			State = 98; phrase();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return logical_expr_sempred((Logical_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logical_expr_sempred(Logical_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', 'g', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x1A', '\n', '\x2', 
		'\x6', '\x2', '\x1C', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x1D', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'$', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x5', '\x6', 
		'.', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x32', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x36', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', ';', '\n', '\b', '\f', '\b', 
		'\xE', '\b', '>', '\v', '\b', '\x3', '\b', '\x5', '\b', '\x41', '\n', 
		'\b', '\x3', '\t', '\x5', '\t', '\x44', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x6', '\t', 'J', '\n', '\t', '\r', '\t', 
		'\xE', '\t', 'K', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'P', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', 'X', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', '^', '\n', '\n', '\f', '\n', '\xE', '\n', '\x61', 
		'\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x4', '\x1D', '<', '\x3', '\x12', '\f', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x2', '\x2', '\x2', 'i', '\x2', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x4', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '%', '\x3', '\x2', '\x2', '\x2', '\b', '*', '\x3', '\x2', '\x2', 
		'\x2', '\n', '-', '\x3', '\x2', '\x2', '\x2', '\f', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '@', '\x3', '\x2', '\x2', '\x2', '\x10', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'W', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\a', '\v', '\x2', 
		'\x2', '\x17', '\x19', '\a', '\x3', '\x2', '\x2', '\x18', '\x1A', '\a', 
		'\f', '\x2', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x16', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\a', '\v', '\x2', '\x2', ' ', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '!', '$', '\x3', '\x2', '\x2', '\x2', '\"', '$', '\x5', 
		'\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '#', '\"', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x5', '\x3', '\x2', '\x2', '\x2', '%', 
		'&', '\a', '\v', '\x2', '\x2', '&', '\'', '\a', '\x4', '\x2', '\x2', '\'', 
		'(', '\x5', '\x4', '\x3', '\x2', '(', ')', '\a', '\x5', '\x2', '\x2', 
		')', '\a', '\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '\f', '\x2', '\x2', 
		'+', '\t', '\x3', '\x2', '\x2', '\x2', ',', '.', '\a', '\f', '\x2', '\x2', 
		'-', ',', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\a', '\x6', '\x2', 
		'\x2', '\x30', '\x32', '\a', '\f', '\x2', '\x2', '\x31', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x33', '\x36', '\x5', '\b', '\x5', 
		'\x2', '\x34', '\x36', '\x5', '\n', '\x6', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x37', '\x41', '\a', '\v', '\x2', '\x2', 
		'\x38', '<', '\a', '\a', '\x2', '\x2', '\x39', ';', '\v', '\x2', '\x2', 
		'\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '>', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', 
		'\x2', '\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', 
		'\x2', '\x2', '?', '\x41', '\a', '\a', '\x2', '\x2', '@', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x38', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\a', '\b', '\x2', 
		'\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'P', '\x5', '\xE', '\b', '\x2', '\x46', 'G', '\x5', '\xE', '\b', '\x2', 
		'G', 'H', '\x5', '\f', '\a', '\x2', 'H', 'J', '\x3', '\x2', '\x2', '\x2', 
		'I', '\x46', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x5', '\xE', '\b', 
		'\x2', 'N', 'P', '\x3', '\x2', '\x2', '\x2', 'O', '\x43', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'I', '\x3', '\x2', '\x2', '\x2', 'P', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'R', '\b', '\n', '\x1', '\x2', 'R', 'X', '\x5', 
		'\x10', '\t', '\x2', 'S', 'T', '\a', '\x4', '\x2', '\x2', 'T', 'U', '\x5', 
		'\x12', '\n', '\x2', 'U', 'V', '\a', '\x5', '\x2', '\x2', 'V', 'X', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'Q', '\x3', '\x2', '\x2', '\x2', 'W', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'X', '_', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\f', 
		'\x4', '\x2', '\x2', 'Z', '[', '\x5', '\f', '\a', '\x2', '[', '\\', '\x5', 
		'\x12', '\n', '\x5', '\\', '^', '\x3', '\x2', '\x2', '\x2', ']', 'Y', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', '\x2', '\x2', '_', 
		']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x13', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\x5', '\xE', '\b', '\x2', '\x63', '\x64', '\a', 
		'\t', '\x2', '\x2', '\x64', '\x65', '\x5', '\xE', '\b', '\x2', '\x65', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xF', '\x19', '\x1D', '#', '-', '\x31', 
		'\x35', '<', '@', '\x43', 'K', 'O', 'W', '_',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
