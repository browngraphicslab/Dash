//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DashSearchGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class DashSearchGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, NEWLINE=7, ALPHANUM=8, 
		STRING=9, WHITESPACE=10;
	public const int
		RULE_argument = 0, RULE_arguments = 1, RULE_function_expr = 2, RULE_and_token = 3, 
		RULE_or_token = 4, RULE_operator = 5, RULE_phrase = 6, RULE_kv_search = 7, 
		RULE_search_term = 8, RULE_not_search_term = 9, RULE_query = 10;
	public static readonly string[] ruleNames = {
		"argument", "arguments", "function_expr", "and_token", "or_token", "operator", 
		"phrase", "kv_search", "search_term", "not_search_term", "query"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'('", "')'", "'|'", "':'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "NEWLINE", "ALPHANUM", "STRING", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DashSearchGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DashSearchGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DashSearchGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DashSearchGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ArgumentContext : ParserRuleContext {
		public ITerminalNode ALPHANUM() { return GetToken(DashSearchGrammarParser.ALPHANUM, 0); }
		public ITerminalNode STRING() { return GetToken(DashSearchGrammarParser.STRING, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			_la = TokenStream.LA(1);
			if ( !(_la==ALPHANUM || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(DashSearchGrammarParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(DashSearchGrammarParser.WHITESPACE, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 2, RULE_arguments);
		int _la;
		try {
			int _alt;
			State = 37;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ALPHANUM:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 30;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 25; argument();
							State = 26; Match(T__0);
							State = 28;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==WHITESPACE) {
								{
								State = 27; Match(WHITESPACE);
								}
							}

							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 32;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				State = 36; argument();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_exprContext : ParserRuleContext {
		public ITerminalNode ALPHANUM() { return GetToken(DashSearchGrammarParser.ALPHANUM, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Function_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_exprContext function_expr() {
		Function_exprContext _localctx = new Function_exprContext(Context, State);
		EnterRule(_localctx, 4, RULE_function_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(ALPHANUM);
			State = 40; Match(T__1);
			State = 41; arguments();
			State = 42; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_tokenContext : ParserRuleContext {
		public ITerminalNode WHITESPACE() { return GetToken(DashSearchGrammarParser.WHITESPACE, 0); }
		public And_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterAnd_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitAnd_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_tokenContext and_token() {
		And_tokenContext _localctx = new And_tokenContext(Context, State);
		EnterRule(_localctx, 6, RULE_and_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(WHITESPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_tokenContext : ParserRuleContext {
		public ITerminalNode[] WHITESPACE() { return GetTokens(DashSearchGrammarParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(DashSearchGrammarParser.WHITESPACE, i);
		}
		public Or_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterOr_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitOr_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_tokenContext or_token() {
		Or_tokenContext _localctx = new Or_tokenContext(Context, State);
		EnterRule(_localctx, 8, RULE_or_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 46; Match(WHITESPACE);
				}
			}

			State = 49; Match(T__3);
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 50; Match(WHITESPACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public And_tokenContext and_token() {
			return GetRuleContext<And_tokenContext>(0);
		}
		public Or_tokenContext or_token() {
			return GetRuleContext<Or_tokenContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_operator);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; and_token();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; or_token();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PhraseContext : ParserRuleContext {
		public ITerminalNode ALPHANUM() { return GetToken(DashSearchGrammarParser.ALPHANUM, 0); }
		public ITerminalNode STRING() { return GetToken(DashSearchGrammarParser.STRING, 0); }
		public PhraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phrase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterPhrase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitPhrase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhraseContext phrase() {
		PhraseContext _localctx = new PhraseContext(Context, State);
		EnterRule(_localctx, 12, RULE_phrase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_la = TokenStream.LA(1);
			if ( !(_la==ALPHANUM || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kv_searchContext : ParserRuleContext {
		public PhraseContext[] phrase() {
			return GetRuleContexts<PhraseContext>();
		}
		public PhraseContext phrase(int i) {
			return GetRuleContext<PhraseContext>(i);
		}
		public Kv_searchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kv_search; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterKv_search(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitKv_search(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKv_search(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kv_searchContext kv_search() {
		Kv_searchContext _localctx = new Kv_searchContext(Context, State);
		EnterRule(_localctx, 14, RULE_kv_search);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; phrase();
			State = 60; Match(T__4);
			State = 61; phrase();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_termContext : ParserRuleContext {
		public Function_exprContext function_expr() {
			return GetRuleContext<Function_exprContext>(0);
		}
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public PhraseContext phrase() {
			return GetRuleContext<PhraseContext>(0);
		}
		public Kv_searchContext kv_search() {
			return GetRuleContext<Kv_searchContext>(0);
		}
		public Search_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterSearch_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitSearch_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_termContext search_term() {
		Search_termContext _localctx = new Search_termContext(Context, State);
		EnterRule(_localctx, 16, RULE_search_term);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; function_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; Match(T__1);
				State = 65; query(0);
				State = 66; Match(T__2);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; phrase();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69; kv_search();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not_search_termContext : ParserRuleContext {
		public Search_termContext search_term() {
			return GetRuleContext<Search_termContext>(0);
		}
		public Not_search_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_search_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterNot_search_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitNot_search_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_search_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Not_search_termContext not_search_term() {
		Not_search_termContext _localctx = new Not_search_termContext(Context, State);
		EnterRule(_localctx, 18, RULE_not_search_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(T__5);
			State = 73; search_term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public Not_search_termContext not_search_term() {
			return GetRuleContext<Not_search_termContext>(0);
		}
		public Search_termContext search_term() {
			return GetRuleContext<Search_termContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDashSearchGrammarListener typedListener = listener as IDashSearchGrammarListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDashSearchGrammarVisitor<TResult> typedVisitor = visitor as IDashSearchGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		return query(0);
	}

	private QueryContext query(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		QueryContext _localctx = new QueryContext(Context, _parentState);
		QueryContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_query, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 86;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 84;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new QueryContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_query);
						State = 76;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 77; @operator();
						State = 78; not_search_term();
						}
						break;
					case 2:
						{
						_localctx = new QueryContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_query);
						State = 80;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 81; @operator();
						State = 82; search_term();
						}
						break;
					}
					} 
				}
				State = 88;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return query_sempred((QueryContext)_localctx, predIndex);
		}
		return true;
	}
	private bool query_sempred(QueryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', '\\', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1F', '\n', '\x3', 
		'\x6', '\x3', '!', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\"', '\x5', 
		'\x3', '%', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '(', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x5', '\x6', '\x32', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x36', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', ':', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', 'I', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 'W', '\n', '\f', 
		'\f', '\f', '\xE', '\f', 'Z', '\v', '\f', '\x3', '\f', '\x2', '\x3', '\x16', 
		'\r', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x2', '\x3', '\x3', '\x2', '\n', '\v', '\x2', '\\', '\x2', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\'', '\x3', '\x2', '\x2', '\x2', '\x6', 
		')', '\x3', '\x2', '\x2', '\x2', '\b', '.', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x31', '\x3', '\x2', '\x2', '\x2', '\f', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\xE', ';', '\x3', '\x2', '\x2', '\x2', '\x10', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'H', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'J', '\x3', '\x2', '\x2', '\x2', '\x16', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x19', '\t', '\x2', '\x2', '\x2', '\x19', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '(', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', 
		'\x5', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\a', '\x3', '\x2', '\x2', 
		'\x1D', '\x1F', '\a', '\f', '\x2', '\x2', '\x1E', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', '!', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x1B', '\x3', '\x2', '\x2', '\x2', '!', 
		'\"', '\x3', '\x2', '\x2', '\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '%', '\x3', '\x2', '\x2', 
		'\x2', '$', ' ', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '(', '\x5', '\x2', '\x2', 
		'\x2', '\'', '\x1A', '\x3', '\x2', '\x2', '\x2', '\'', '$', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x5', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', 
		'\n', '\x2', '\x2', '*', '+', '\a', '\x4', '\x2', '\x2', '+', ',', '\x5', 
		'\x4', '\x3', '\x2', ',', '-', '\a', '\x5', '\x2', '\x2', '-', '\a', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\a', '\f', '\x2', '\x2', '/', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x32', '\a', '\f', '\x2', '\x2', '\x31', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x35', '\a', 
		'\x6', '\x2', '\x2', '\x34', '\x36', '\a', '\f', '\x2', '\x2', '\x35', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\v', '\x3', '\x2', '\x2', '\x2', '\x37', ':', '\x5', '\b', 
		'\x5', '\x2', '\x38', ':', '\x5', '\n', '\x6', '\x2', '\x39', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', 
		':', '\r', '\x3', '\x2', '\x2', '\x2', ';', '<', '\t', '\x2', '\x2', '\x2', 
		'<', '\xF', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x5', '\xE', '\b', 
		'\x2', '>', '?', '\a', '\a', '\x2', '\x2', '?', '@', '\x5', '\xE', '\b', 
		'\x2', '@', '\x11', '\x3', '\x2', '\x2', '\x2', '\x41', 'I', '\x5', '\x6', 
		'\x4', '\x2', '\x42', '\x43', '\a', '\x4', '\x2', '\x2', '\x43', '\x44', 
		'\x5', '\x16', '\f', '\x2', '\x44', '\x45', '\a', '\x5', '\x2', '\x2', 
		'\x45', 'I', '\x3', '\x2', '\x2', '\x2', '\x46', 'I', '\x5', '\xE', '\b', 
		'\x2', 'G', 'I', '\x5', '\x10', '\t', '\x2', 'H', '\x41', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x42', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'I', '\x13', 
		'\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\b', '\x2', '\x2', 'K', 'L', 
		'\x5', '\x12', '\n', '\x2', 'L', '\x15', '\x3', '\x2', '\x2', '\x2', 'M', 
		'X', '\b', '\f', '\x1', '\x2', 'N', 'O', '\f', '\x4', '\x2', '\x2', 'O', 
		'P', '\x5', '\f', '\a', '\x2', 'P', 'Q', '\x5', '\x14', '\v', '\x2', 'Q', 
		'W', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\f', '\x3', '\x2', '\x2', 
		'S', 'T', '\x5', '\f', '\a', '\x2', 'T', 'U', '\x5', '\x12', '\n', '\x2', 
		'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', 'N', '\x3', '\x2', '\x2', '\x2', 
		'V', 'R', '\x3', '\x2', '\x2', '\x2', 'W', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'Y', '\x17', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x1E', '\"', '$', '\'', '\x31', '\x35', '\x39', 'H', 'V', 
		'X',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
